// <auto-generated />
using System;
using EazyFind.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EazyFind.Infrastructure.Migrations
{
    [DbContext(typeof(EazyFindDbContext))]
    [Migration("20250321000000_AddProductAlerts")]
    partial class AddProductAlerts
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EazyFind.Domain.Entities.Category", b =>
                {
                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.HasKey("Type");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("EazyFind.Domain.Entities.ProductAlert", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("ChatId")
                        .HasColumnType("bigint")
                        .HasColumnName("chat_id");

                    b.Property<DateTime>("CreatedAtUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at_utc")
                        .HasDefaultValueSql("now()");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("is_active")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("LastCheckedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_checked_utc");

                    b.Property<decimal?>("MaxPrice")
                        .HasColumnType("numeric(12,2)")
                        .HasColumnName("max_price");

                    b.Property<decimal?>("MinPrice")
                        .HasColumnType("numeric(12,2)")
                        .HasColumnName("min_price");

                    b.Property<string>("SearchText")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("search_text");

                    b.Property<string[]>("StoreKeys")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text[]")
                        .HasColumnName("store_keys")
                        .HasDefaultValue(Array.Empty<string>());

                    b.HasKey("Id");

                    b.HasIndex("ChatId")
                        .HasDatabaseName("ix_product_alerts_chat");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("ix_product_alerts_active");

                    b.ToTable("product_alerts");
                });

            modelBuilder.Entity("EazyFind.Domain.Entities.ProductAlertMatch", b =>
                {
                    b.Property<long>("AlertId")
                        .HasColumnType("bigint")
                        .HasColumnName("alert_id");

                    b.Property<string>("ProductId")
                        .HasColumnType("text")
                        .HasColumnName("product_id");

                    b.Property<DateTime>("MatchedAtUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("matched_at_utc")
                        .HasDefaultValueSql("now()");

                    b.HasKey("AlertId", "ProductId");

                    b.ToTable("product_alert_matches");
                });

            modelBuilder.Entity("EazyFind.Domain.Entities.ProductAlertMatch", b =>
                {
                    b.HasOne("EazyFind.Domain.Entities.ProductAlert", "Alert")
                        .WithMany("Matches")
                        .HasForeignKey("AlertId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Alert");
                });

            modelBuilder.Entity("EazyFind.Domain.Entities.ProductAlert", b =>
                {
                    b.Navigation("Matches");
                });

            modelBuilder.Entity("EazyFind.Domain.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastSyncedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<decimal>("Price")
                        .HasColumnType("DECIMAL(10,2)");

                    b.Property<int>("StoreCategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Name"), "GIN");
                    NpgsqlIndexBuilderExtensions.HasOperators(b.HasIndex("Name"), new[] { "gin_trgm_ops" });

                    b.HasIndex("StoreCategoryId");

                    b.HasIndex("Url")
                        .IsUnique();

                    b.ToTable("Products");
                });

            modelBuilder.Entity("EazyFind.Domain.Entities.Store", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("WebsiteUrl")
                        .HasColumnType("text");

                    b.HasKey("Key");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Stores");
                });

            modelBuilder.Entity("EazyFind.Domain.Entities.StoreCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CategoryType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("OriginalCategoryName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("StoreKey")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CategoryType");

                    b.HasIndex("StoreKey");

                    b.ToTable("StoreCategories");
                });

            modelBuilder.Entity("EazyFind.Domain.Entities.ProductAlert", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("ChatId")
                        .HasColumnType("bigint")
                        .HasColumnName("chat_id");

                    b.Property<DateTime>("CreatedAtUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at_utc")
                        .HasDefaultValueSql("now()");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("is_active")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("LastCheckedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_checked_utc");

                    b.Property<decimal?>("MaxPrice")
                        .HasColumnType("numeric(12,2)")
                        .HasColumnName("max_price");

                    b.Property<decimal?>("MinPrice")
                        .HasColumnType("numeric(12,2)")
                        .HasColumnName("min_price");

                    b.Property<string>("SearchText")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("search_text");

                    b.Property<string[]>("StoreKeys")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text[]")
                        .HasColumnName("store_keys")
                        .HasDefaultValue(Array.Empty<string>());

                    b.HasKey("Id");

                    b.HasIndex("ChatId")
                        .HasDatabaseName("ix_product_alerts_chat");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("ix_product_alerts_active");

                    b.ToTable("product_alerts");
                });

            modelBuilder.Entity("EazyFind.Domain.Entities.ProductAlertMatch", b =>
                {
                    b.Property<long>("AlertId")
                        .HasColumnType("bigint")
                        .HasColumnName("alert_id");

                    b.Property<string>("ProductId")
                        .HasColumnType("text")
                        .HasColumnName("product_id");

                    b.Property<DateTime>("MatchedAtUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("matched_at_utc")
                        .HasDefaultValueSql("now()");

                    b.HasKey("AlertId", "ProductId");

                    b.ToTable("product_alert_matches");
                });

            modelBuilder.Entity("EazyFind.Domain.Entities.ProductAlertMatch", b =>
                {
                    b.HasOne("EazyFind.Domain.Entities.ProductAlert", "Alert")
                        .WithMany("Matches")
                        .HasForeignKey("AlertId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Alert");
                });

            modelBuilder.Entity("EazyFind.Domain.Entities.ProductAlert", b =>
                {
                    b.Navigation("Matches");
                });

            modelBuilder.Entity("EazyFind.Domain.Entities.Product", b =>
                {
                    b.HasOne("EazyFind.Domain.Entities.StoreCategory", "StoreCategory")
                        .WithMany("Products")
                        .HasForeignKey("StoreCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StoreCategory");
                });

            modelBuilder.Entity("EazyFind.Domain.Entities.StoreCategory", b =>
                {
                    b.HasOne("EazyFind.Domain.Entities.Category", "Category")
                        .WithMany("StoreCategories")
                        .HasForeignKey("CategoryType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EazyFind.Domain.Entities.Store", "Store")
                        .WithMany("StoreCategories")
                        .HasForeignKey("StoreKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("EazyFind.Domain.Entities.Category", b =>
                {
                    b.Navigation("StoreCategories");
                });

            modelBuilder.Entity("EazyFind.Domain.Entities.Store", b =>
                {
                    b.Navigation("StoreCategories");
                });

            modelBuilder.Entity("EazyFind.Domain.Entities.StoreCategory", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
